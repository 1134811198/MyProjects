package com.atguigu.mybatis.test;

import static org.junit.Assert.*;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.Before;
import org.junit.Test;

import com.atguigu.mybatis.beans.Employee;
import com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL;

public class TestDynamicSQL {
	EmployeeMapperDynamicSQL mapper;
	SqlSession session;
	
	@Before
	public void init() throws Exception {
		String resource = "MyBatis.xml";
	
        InputStream inputStream = 
        		Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory = 
        		new SqlSessionFactoryBuilder().build(inputStream);
         session = sqlSessionFactory.openSession();
        mapper = session.getMapper(EmployeeMapperDynamicSQL.class);
        System.out.println(mapper);
	
	}
   @Test
   public void testConditionIf() {
	   /*
	    *     id  last_name  email          gender    d_id  
              10  hui2       hui2@126.com   0              4
	    */
	   Employee condition=new Employee(null,"jack",null,0);
	   List<Employee> empsByConditionIf = mapper.getEmpsByConditionIf(condition);
	   System.out.println(empsByConditionIf);
   }
   @Test
   public void testConditionTrim() {
	   Employee condition=new Employee(null,"jack",null,3);
	   List<Employee> empsByConditionTrim = mapper.getEmpsByConditionTrim(condition);
	   System.out.println(empsByConditionTrim);
   }
   @Test
   public void testConditionSet() {
	   Employee condition=new Employee(10, "Jerry33","Jerry33@sina.com", 1);
	   Integer integer = mapper.updateEmpsByConditionSet(condition);
	   System.out.println(integer);
	   
	   session.commit();
   }
   @Test
   public void testConditionChoose() {
	   Employee condition=new Employee(10, "Jerry33","Jerry33@sina.com", 1);
	   List<Employee> empsByConditionChoose = mapper.getEmpsByConditionChoose(condition);
	   System.out.println(empsByConditionChoose);
   }
   @Test
   public void testConditionForeach() {
	   List<Integer> ids= new ArrayList<>();
	   ids.add(2);
	   ids.add(3);
	   ids.add(4);
	    List<Employee> empsByIds = mapper.getEmpsByIds(ids);
	    System.out.println(empsByIds);
   }
   @Test
   public void testBatchAdd() {
	   List<Employee> emps=new ArrayList<>();
	   emps.add(new Employee(null,"Marry","Marry@126.com",0));
	   emps.add(new Employee(null,"Jerry","Jerry@126.com",0));
	   emps.add(new Employee(null,"Lucy","Lucy@126.com",0));
	   mapper.addEmpBatch(emps);
	   session.commit();
   }
   @Test
   public void testBatchUpdate() {
	   List<Employee> emps=new ArrayList<>();

	   emps.add(new Employee(2, "婷姐", "tt@atguigu.cn", 0));
		emps.add(new Employee(3, "柴柴", "cc@atguigu.cn", 0));
		emps.add(new Employee(4, "刚刚", "gg@atguigu.cn", 0));
	   mapper.upadateEmpBetch(emps);
	   session.commit();
   }
}
