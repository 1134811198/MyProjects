<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespace: 命名空间. 
			     现在可以随便写. 
			  如果使用的是Mapper接口开发，则namespace的值必须写成接口的全类名. 

 -->
<!-- <mapper namespace="suibian"> -->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
	
	<!-- 
		SQL语句的定义:
			id: SQL语句的唯一标识。 
			resultType: 结果集的封装类型
			#{id}:  获取执行Sql语句的参数
	 -->
	<select id="selectEmployee" resultType="com.atguigu.mybatis.beans.Employee">
		select id, last_name lastName, email,gender  from tbl_employee where id = #{id}
	</select>
	
	<!-- public Employee getEmployeeById(Integer id ); -->
	<select id="getEmployeeById" resultType="employee">
		<!-- select id, last_name lastName, email,gender  from tbl_employee where id = #{id} -->
		select *  from tbl_employee where id = #{id}
	</select>
	
	<!-- public void  addEmployee(Employee employee); 
		parameterType: 参数类型。 可以省略的。  MyBatis可以根据参数自动推断类型. 
	-->
	<insert id="addEmployee" parameterType="com.atguigu.mybatis.beans.Employee"
		useGeneratedKeys="true" keyProperty="id">
		insert into tbl_employee (last_name, email,gender ) values(#{lastName},#{email},#{gender})
	</insert>
	
	<!-- public void  updateEmployee(Employee employee); -->
	<update id="updateEmployee">
		update tbl_employee set  
			last_name = #{lastName},email = #{email},gender = #{gender}
			where id = #{id}
	 </update>
	
	<!-- public void  deleteEmployeeById(Integer id ); -->
	<delete id="deleteEmployeeById" parameterType="java.lang.Integer">
		delete from tbl_employee where id = #{id}
	</delete>
	
	
</mapper>